name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "Your_password123!"
          ACCEPT_EULA: "Y"
        ports:
          - 1433:1433
        # Без healthcheck, щоб контейнер не маркувався як unhealthy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Wait for SQL Server to be ready
        run: |
          echo "Чекаю, коли SQL Server почне слухати порт 1433..."
          until nc -z localhost 1433; do
            echo "Порт 1433 недоступний, чекаємо 5 сек..."
            sleep 5
          done
          echo "Порт 1433 відкрився, SQL Server готовий."

      - name: Restore all projects
        run: |
          dotnet restore DotaMetaExplorer/DotaMetaExplorer.csproj
          dotnet restore TelegramBot/TelegramBot.csproj
          dotnet restore DotaMetaExplorer.Tests/DotaMetaExplorer.Tests.csproj

      - name: Build all projects
        run: |
          dotnet build DotaMetaExplorer/DotaMetaExplorer.csproj --configuration Release --no-restore
          dotnet build TelegramBot/TelegramBot.csproj --configuration Release --no-restore
          dotnet build DotaMetaExplorer.Tests/DotaMetaExplorer.Tests.csproj --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test DotaMetaExplorer.Tests/DotaMetaExplorer.Tests.csproj --no-build --configuration Release --logger trx
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=dotameta;User Id=sa;Password=Your_password123!;TrustServerCertificate=True"

      - name: Build Docker image for API
        run: |
          docker build -t dotametaexplorer -f DotaMetaExplorer/Dockerfile DotaMetaExplorer

      - name: Build Docker image for TelegramBot
        run: |
          docker build -t telegrambot -f TelegramBot/Dockerfile .
